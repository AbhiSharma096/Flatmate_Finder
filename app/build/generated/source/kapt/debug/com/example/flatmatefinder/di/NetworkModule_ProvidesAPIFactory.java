// Generated by Dagger (https://dagger.dev).
package com.example.flatmatefinder.di;

import com.example.flatmatefinder.api.API;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import retrofit2.Retrofit;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class NetworkModule_ProvidesAPIFactory implements Factory<API> {
  private final NetworkModule module;

  private final Provider<Retrofit.Builder> retrofitBuilderProvider;

  public NetworkModule_ProvidesAPIFactory(NetworkModule module,
      Provider<Retrofit.Builder> retrofitBuilderProvider) {
    this.module = module;
    this.retrofitBuilderProvider = retrofitBuilderProvider;
  }

  @Override
  public API get() {
    return providesAPI(module, retrofitBuilderProvider.get());
  }

  public static NetworkModule_ProvidesAPIFactory create(NetworkModule module,
      Provider<Retrofit.Builder> retrofitBuilderProvider) {
    return new NetworkModule_ProvidesAPIFactory(module, retrofitBuilderProvider);
  }

  public static API providesAPI(NetworkModule instance, Retrofit.Builder retrofitBuilder) {
    return Preconditions.checkNotNullFromProvides(instance.providesAPI(retrofitBuilder));
  }
}
