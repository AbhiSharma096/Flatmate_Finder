// Generated by Dagger (https://dagger.dev).
package com.example.flatmatefinder.di;

import com.example.flatmatefinder.api.AuthInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class NetworkModule_ProvidesOkHTTPClientFactory implements Factory<OkHttpClient> {
  private final NetworkModule module;

  private final Provider<AuthInterceptor> authInterceptorProvider;

  public NetworkModule_ProvidesOkHTTPClientFactory(NetworkModule module,
      Provider<AuthInterceptor> authInterceptorProvider) {
    this.module = module;
    this.authInterceptorProvider = authInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return providesOkHTTPClient(module, authInterceptorProvider.get());
  }

  public static NetworkModule_ProvidesOkHTTPClientFactory create(NetworkModule module,
      Provider<AuthInterceptor> authInterceptorProvider) {
    return new NetworkModule_ProvidesOkHTTPClientFactory(module, authInterceptorProvider);
  }

  public static OkHttpClient providesOkHTTPClient(NetworkModule instance,
      AuthInterceptor authInterceptor) {
    return Preconditions.checkNotNullFromProvides(instance.providesOkHTTPClient(authInterceptor));
  }
}
